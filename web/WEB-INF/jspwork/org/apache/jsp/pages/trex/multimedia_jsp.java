/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.37
 * Generated at: 2019-03-22 06:06:36 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.pages.trex;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class multimedia_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n");
      out.write("        \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n");
      out.write("<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n");
      out.write("<head>\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n");
      out.write("<title>Daum 에디터 - 멀티미디어 첨부</title> \n");
      out.write("<script src=\"/math/resourcesjs/popup.js\" type=\"text/javascript\" charset=\"utf-8\"></script>\n");
      out.write("<link rel=\"stylesheet\" href=\"/math/resources/css/popup.css\" type=\"text/css\"  charset=\"utf-8\"/>\n");
      out.write("<style type=\"text/css\">\n");
      out.write("\tinput,textarea { border:1px solid #000000;vertical-align:middle;font-size:12px;}\n");
      out.write("\t\n");
      out.write("\t/* swf wrapper, set width/height */\n");
      out.write("\t.wrapper { width:458px; }\n");
      out.write("\t.code { width:458px; }\n");
      out.write("\t\n");
      out.write("\t.hidden { display:none;}\n");
      out.write("\t.show { display:auto;}\n");
      out.write("\t.desc{ margin: 15px 27px 5px 25px;padding:10px 8px;text-align:left;font-weight:bold;}\n");
      out.write("\t.desc span{ color:#496ce5; }\n");
      out.write("\t.field { margin:0 auto 10px; background:#ffffff url(/math/resources/images/icon/editor/tvpot/body_bg.gif?rev=1.0.1);width:420px;height:239px;}\n");
      out.write("\t.field li{ list-style-type:none;}\n");
      out.write("\t.field .codesubmenu { padding-top:20px;width:350px; margin:0 auto; }\n");
      out.write("\t.codeMenu { margin:0px auto;}\n");
      out.write("\t.codeMenu li { display:inline;margin-right:20px; }\n");
      out.write("\t.inputmenu { margin-top:20px;padding-left:30px; color:#333;font-size:11px;font-family:\"돋움\",dotum}\n");
      out.write("\t.inputmenu input, .inputmenu textarea{ width:308px; }\n");
      out.write("\t#codeUrl { margin-top:10px;}\n");
      out.write("\t\n");
      out.write("\t.inputmenu .unselected{color:#bbbbbb}\n");
      out.write("\t.inputmenu .unselected input, .inputmenu .unselected textarea{border:1px solid #bbbbbb;}\n");
      out.write("\t\n");
      out.write("\t.point {\n");
      out.write("\t\tfont-weight:normal;\n");
      out.write("\t\tcolor:#a7b9ec;\n");
      out.write("\t}\n");
      out.write("</style>\n");
      out.write("<script type=\"text/javascript\">\n");
      out.write("// <![CDATA[\n");
      out.write("\n");
      out.write("\tfunction initEmbeder() {\n");
      out.write("\t\tvar _opener = PopupUtil.getOpener();\n");
      out.write("\t\tif(!_opener) {\n");
      out.write("\t\t\talert('잘못된 경로로 접근하셨습니다.');\n");
      out.write("\t\t\treturn; \n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tvar _embeder = getEmbeder('media');\n");
      out.write("\t\twindow.execEmbed = _embeder.embedHandler;\n");
      out.write("\t\t\n");
      out.write("\t\tautoResizeHeight($tx(\"wrapper\"));\n");
      out.write("\t}\n");
      out.write("\t\n");
      out.write("\t// 코드 삽입 완료 후\n");
      out.write("\tfunction done() {\n");
      out.write("\t\tvar _data = {};\n");
      out.write("\t\tvar types = document.getElementsByName(\"codeType\");\n");
      out.write("\t\tif (types[1].checked) {\n");
      out.write("\t\t\t_data.url = document.getElementsByName(\"url\")[0].value.trim();\n");
      out.write("\t\t} else if (types[0].checked) {\n");
      out.write("\t\t\t_data.code = document.getElementsByName(\"source\")[0].value.trim();\n");
      out.write("\t\t}\n");
      out.write("\t\tif (typeof(execEmbed) == 'undefined') { //Virtual Function\n");
      out.write("\t        return;\n");
      out.write("\t    }\n");
      out.write("\t\texecuteAfterDataCheck(_data, function(){\n");
      out.write("\t\t\texecEmbed(_data);\n");
      out.write("\t\t\tcloseWindow();\n");
      out.write("\t    }); \n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tfunction executeAfterDataCheck(data, successHandler) {\n");
      out.write("\t\tif (data.url || data.code) {\n");
      out.write("\t\t\tsuccessHandler();\n");
      out.write("\t\t} else {\n");
      out.write("\t\t\talert(\"첨부할 멀티미디어 주소를 바르게 입력해주세요.\");\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("\t\n");
      out.write("\tfunction selectType(id){\n");
      out.write("\t\tvar textArea = document.getElementsByName(\"source\")[0];\n");
      out.write("\t\tvar input = document.getElementsByName(\"url\")[0];\t\n");
      out.write("\t\tif ( id == 'codeUrl' ){\n");
      out.write("\t\t\t$tx.addClassName($tx('codeSource'), \"unselected\")\n");
      out.write("\t\t\t$tx.removeClassName($tx('codeUrl'), \"unselected\")\n");
      out.write("\t\t\ttextArea.value = \"\";\n");
      out.write("\t\t\ttextArea.disabled = true;\n");
      out.write("\t\t\tinput.disabled=false;\n");
      out.write("\t\t\tinput.focus();\n");
      out.write("\t\t}else{\n");
      out.write("\t\t\t$tx.addClassName($tx('codeUrl'), \"unselected\")\n");
      out.write("\t\t\t$tx.removeClassName($tx('codeSource'), \"unselected\")\n");
      out.write("\t\t\ttextArea.disabled = false;\n");
      out.write("\t\t\tinput.value = \"\";\t\t\n");
      out.write("\t\t\tinput.disabled=true;\n");
      out.write("\t\t\ttextArea.focus();\n");
      out.write("\t\t}\n");
      out.write("\t\tautoResizeHeight($tx(\"wrapper\"));\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("// ]]>\n");
      out.write("</script>\n");
      out.write("</head>\n");
      out.write("<body onload=\"initEmbeder()\">\n");
      out.write("<div id=\"wrapper\" class=\"wrapper\">\n");
      out.write("<div class=\"header\">\n");
      out.write("\t<h1>외부컨텐츠 삽입</h1>\n");
      out.write("</div>\t\n");
      out.write("<div class=\"body\">\n");
      out.write("\t<div id=\"code\" class=\"code\">\n");
      out.write("\t\t<p class=\"desc\">아래 <span>멀티미디어 </span> 등의 삽입 방식을 선택한 후, 주소를 입력하세요.</p>\n");
      out.write("\t\t<ul class=\"field\">\n");
      out.write("\t\t\t<li class=\"codesubmenu\">\n");
      out.write("\t\t\t\t<ol class=\"codeMenu\">\n");
      out.write("\t\t\t\t\t<li><input type=\"radio\" id=\"type_source\" value=\"source\" name=\"codeType\" onclick=\"selectType('codeSource');\" checked=\"checked\" style=\"border:none\" /> <label for=\"type_source\">html(embed,object 소스입력)</label></li>\n");
      out.write("\t\t\t\t\t<li><input type=\"radio\" id=\"type_url\" value=\"url\" name=\"codeType\" onclick=\"selectType('codeUrl');\" style=\"border:none\" /> <label for=\"type_url\">멀티미디어 링크</label></li>\n");
      out.write("\t\t\t\t</ol> \n");
      out.write("\t\t\t</li>\n");
      out.write("\t\t\t<li class=\"inputmenu\">\n");
      out.write("\t\t\t\t<ol>\n");
      out.write("\t\t\t\t\t<li id=\"codeSource\"><label>소스입력 </label><textarea rows=\"7\" name=\"source\"></textarea></li>\t\t\t\t\t\t\t\n");
      out.write("\t\t\t\t\t<li id=\"codeUrl\" class=\"unselected\"><label>링크입력 </label><input type=\"text\" name=\"url\" disabled=\"true\" /></li>\n");
      out.write("\t\t\t\t</ol>\n");
      out.write("\t\t\t</li>\n");
      out.write("\t\t</ul>\n");
      out.write("\t</div>\n");
      out.write("</div>\n");
      out.write("<div class=\"footer\">\n");
      out.write("\t<p><a href=\"#\" onclick=\"closeWindow();\" title=\"닫기\" class=\"close\">닫기</a></p>\n");
      out.write("\t<ul>\n");
      out.write("\t\t<li class=\"submit\"><a href=\"#\" onclick=\"done();\" title=\"등록\" class=\"btnlink\">등록</a> </li>\n");
      out.write("\t</ul>\n");
      out.write("</div>\n");
      out.write("</div>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
